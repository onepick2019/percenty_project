#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÏõπÏä§ÌÜ†Ïñ¥ÏóêÏÑú ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû®ÏùÑ ÏßÅÏ†ë ÏÑ§ÏπòÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏

Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Chrome Web StoreÏóêÏÑú ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Îã§Ïö¥Î°úÎìúÌïòÍ≥†
ÏÑ§ÏπòÌïòÏó¨ Ïò¨Î∞îÎ•∏ IDÏôÄ Ï∂úÏ≤òÎ•º Í∞ÄÏßÄÎèÑÎ°ù Ìï©ÎãàÎã§.
"""

import os
import sys
import time
import json
import logging
import requests
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class WebStoreExtensionInstaller:
    def __init__(self):
        self.driver = None
        self.extension_id = "jlcdjppbpplpdgfeknhioedbhfceaben"  # ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ID
        self.extension_url = f"https://chrome.google.com/webstore/detail/{self.extension_id}"
        self.user_data_dir = os.path.join(os.getcwd(), "chrome_user_data_webstore")
        
    def setup_chrome_options(self):
        """Chrome ÏòµÏÖò ÏÑ§Ï†ï"""
        options = Options()
        
        # ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
        options.add_argument(f"--user-data-dir={self.user_data_dir}")
        
        # Í∏∞Î≥∏ Chrome ÏòµÏÖò
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§ÏπòÎ•º ÏúÑÌïú ÏÑ§Ï†ï
        options.add_argument("--disable-extensions-file-access-check")
        options.add_argument("--disable-extensions-http-throttling")
        options.add_argument("--allow-running-insecure-content")
        
        return options
    
    def start_browser(self):
        """Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë"""
        try:
            logger.info("üöÄ Chrome Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë...")
            options = self.setup_chrome_options()
            self.driver = webdriver.Chrome(options=options)
            
            # ÏûêÎèôÌôî Í∞êÏßÄ Î∞©ÏßÄ
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë ÏÑ±Í≥µ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë Ïã§Ìå®: {e}")
            return False
    
    def install_extension_from_webstore(self):
        """ÏõπÏä§ÌÜ†Ïñ¥ÏóêÏÑú ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò"""
        try:
            logger.info("üåê Chrome Web StoreÎ°ú Ïù¥Îèô...")
            self.driver.get(self.extension_url)
            time.sleep(3)
            
            # ÌéòÏù¥ÏßÄ Î°úÎìú ÌôïÏù∏
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            logger.info("üìÑ ÏõπÏä§ÌÜ†Ïñ¥ ÌéòÏù¥ÏßÄ Î°úÎìú ÏôÑÎ£å")
            
            # "ChromeÏóê Ï∂îÍ∞Ä" Î≤ÑÌäº Ï∞æÍ∏∞ Î∞è ÌÅ¥Î¶≠
            try:
                # Îã§ÏñëÌïú ÏÑ†ÌÉùÏûêÎ°ú "ChromeÏóê Ï∂îÍ∞Ä" Î≤ÑÌäº Ï∞æÍ∏∞
                add_button_selectors = [
                    "div[role='button'][aria-label*='ChromeÏóê Ï∂îÍ∞Ä']",
                    "div[role='button'][aria-label*='Add to Chrome']",
                    "button[aria-label*='ChromeÏóê Ï∂îÍ∞Ä']",
                    "button[aria-label*='Add to Chrome']",
                    "div.webstore-test-button-label",
                    "div[jsaction*='click']"
                ]
                
                add_button = None
                for selector in add_button_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for element in elements:
                            text = element.get_attribute('textContent') or element.get_attribute('aria-label') or ''
                            if 'ChromeÏóê Ï∂îÍ∞Ä' in text or 'Add to Chrome' in text:
                                add_button = element
                                break
                        if add_button:
                            break
                    except:
                        continue
                
                if add_button:
                    logger.info("üîò 'ChromeÏóê Ï∂îÍ∞Ä' Î≤ÑÌäº Î∞úÍ≤¨")
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", add_button)
                    time.sleep(1)
                    
                    # ÌÅ¥Î¶≠ ÏãúÎèÑ
                    try:
                        add_button.click()
                    except:
                        # JavaScriptÎ°ú ÌÅ¥Î¶≠ ÏãúÎèÑ
                        self.driver.execute_script("arguments[0].click();", add_button)
                    
                    logger.info("‚úÖ 'ChromeÏóê Ï∂îÍ∞Ä' Î≤ÑÌäº ÌÅ¥Î¶≠ ÏÑ±Í≥µ")
                    time.sleep(2)
                    
                    # ÌôïÏù∏ ÎåÄÌôîÏÉÅÏûê Ï≤òÎ¶¨
                    try:
                        # "ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï∂îÍ∞Ä" Î≤ÑÌäº Ï∞æÍ∏∞
                        confirm_button = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï∂îÍ∞Ä') or contains(text(), 'Add extension')]"))
                        )
                        confirm_button.click()
                        logger.info("‚úÖ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï∂îÍ∞Ä ÌôïÏù∏")
                        time.sleep(3)
                        
                    except:
                        logger.warning("‚ö†Ô∏è ÌôïÏù∏ ÎåÄÌôîÏÉÅÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå (Ïù¥ÎØ∏ ÏÑ§ÏπòÎêòÏóàÏùÑ Ïàò ÏûàÏùå)")
                    
                else:
                    logger.warning("‚ö†Ô∏è 'ChromeÏóê Ï∂îÍ∞Ä' Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå (Ïù¥ÎØ∏ ÏÑ§ÏπòÎêòÏóàÏùÑ Ïàò ÏûàÏùå)")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è ÏÑ§Ïπò Î≤ÑÌäº Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå ÏõπÏä§ÌÜ†Ïñ¥ÏóêÏÑú ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò Ïã§Ìå®: {e}")
            return False
    
    def verify_extension_installation(self):
        """ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÌôïÏù∏"""
        try:
            logger.info("üîç ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÌôïÏù∏...")
            
            # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            self.driver.get("chrome://extensions/")
            time.sleep(3)
            
            # Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî
            try:
                dev_mode_js = """
                const toggleButton = document.querySelector('extensions-manager')
                    ?.shadowRoot?.querySelector('extensions-toolbar')
                    ?.shadowRoot?.querySelector('#devMode');
                if (toggleButton && !toggleButton.checked) {
                    toggleButton.click();
                    return 'activated';
                }
                return toggleButton?.checked ? 'already_active' : 'not_found';
                """
                
                result = self.driver.execute_script(dev_mode_js)
                logger.info(f"üõ†Ô∏è Í∞úÎ∞úÏûê Î™®Îìú: {result}")
                time.sleep(2)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî Ïã§Ìå®: {e}")
            
            # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥ Ï∂îÏ∂ú
            extraction_js = """
            const manager = document.querySelector('extensions-manager');
            if (!manager || !manager.shadowRoot) {
                return {error: 'extensions-manager not found'};
            }
            
            const itemList = manager.shadowRoot.querySelector('extensions-item-list');
            if (!itemList || !itemList.shadowRoot) {
                return {error: 'extensions-item-list not found'};
            }
            
            const extensions = itemList.shadowRoot.querySelectorAll('extensions-item');
            const results = [];
            
            extensions.forEach(ext => {
                if (!ext.shadowRoot) return;
                
                const nameElement = ext.shadowRoot.querySelector('#name');
                const idElement = ext.shadowRoot.querySelector('#extension-id');
                const enableToggle = ext.shadowRoot.querySelector('#enableToggle');
                const detailsButton = ext.shadowRoot.querySelector('#detailsButton');
                
                const name = nameElement?.textContent?.trim() || '';
                const id = idElement?.textContent?.trim() || ext.id || '';
                const enabled = enableToggle?.checked || false;
                
                // Ï∂úÏ≤ò Ï†ïÎ≥¥ ÌôïÏù∏
                const sourceElement = ext.shadowRoot.querySelector('.source');
                const source = sourceElement?.textContent?.trim() || '';
                
                results.push({
                    name: name,
                    id: id,
                    enabled: enabled,
                    source: source
                });
            });
            
            return {
                total_extensions: results.length,
                extensions: results,
                percenty_extension: results.find(ext => 
                    ext.name.includes('ÌçºÏÑºÌã∞') || 
                    ext.id === 'jlcdjppbpplpdgfeknhioedbhfceaben'
                ) || null
            };
            """
            
            result = self.driver.execute_script(extraction_js)
            
            if result.get('error'):
                logger.error(f"‚ùå ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥ Ï∂îÏ∂ú Ïã§Ìå®: {result['error']}")
                return False
            
            logger.info(f"üìä Ï¥ù ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ïàò: {result['total_extensions']}")
            
            percenty_ext = result.get('percenty_extension')
            if percenty_ext:
                logger.info("‚úÖ ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Î∞úÍ≤¨:")
                logger.info(f"   - Ïù¥Î¶Ñ: {percenty_ext['name']}")
                logger.info(f"   - ID: {percenty_ext['id']}")
                logger.info(f"   - ÌôúÏÑ±Ìôî: {percenty_ext['enabled']}")
                logger.info(f"   - Ï∂úÏ≤ò: {percenty_ext['source']}")
                
                # Í≤∞Í≥º Ï†ÄÏû•
                result_data = {
                    'extraction_method': 'webstore_installation',
                    'timestamp': datetime.now().isoformat(),
                    'percenty_extension': percenty_ext,
                    'all_extensions': result['extensions'],
                    'success': True
                }
                
                with open('webstore_extension_result.json', 'w', encoding='utf-8') as f:
                    json.dump(result_data, f, ensure_ascii=False, indent=2)
                
                logger.info("üíæ Í≤∞Í≥ºÍ∞Ä webstore_extension_result.json ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
                return True
            else:
                logger.error("‚ùå ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                
                # ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ï†ÄÏû•
                debug_data = {
                    'extraction_method': 'webstore_installation_debug',
                    'timestamp': datetime.now().isoformat(),
                    'all_extensions': result['extensions'],
                    'success': False
                }
                
                with open('webstore_extension_debug.json', 'w', encoding='utf-8') as f:
                    json.dump(debug_data, f, ensure_ascii=False, indent=2)
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÌôïÏù∏ Ïã§Ìå®: {e}")
            return False
    
    def cleanup(self):
        """Ï†ïÎ¶¨ ÏûëÏóÖ"""
        if self.driver:
            logger.info("üîö Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å...")
            try:
                self.driver.quit()
            except:
                pass
            time.sleep(2)
    
    def run(self):
        """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
        logger.info("=" * 60)
        logger.info("üåê ÏõπÏä§ÌÜ†Ïñ¥ÏóêÏÑú ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÏãúÏûë")
        logger.info("=" * 60)
        
        try:
            # Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë
            if not self.start_browser():
                return False
            
            # ÏõπÏä§ÌÜ†Ïñ¥ÏóêÏÑú ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò
            if not self.install_extension_from_webstore():
                return False
            
            # ÏÑ§Ïπò ÌôïÏù∏
            success = self.verify_extension_installation()
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
            return False
        
        finally:
            self.cleanup()

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    installer = WebStoreExtensionInstaller()
    
    try:
        success = installer.run()
        
        logger.info("=" * 60)
        if success:
            logger.info("‚úÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å: ÏõπÏä§ÌÜ†Ïñ¥ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÏÑ±Í≥µ")
        else:
            logger.info("‚ùå ÌÖåÏä§Ìä∏ ÏôÑÎ£å: ÏõπÏä§ÌÜ†Ïñ¥ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò Ïã§Ìå®")
        logger.info("=" * 60)
        
        return success
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï§ëÎã®Îê®")
        installer.cleanup()
        return False
    except Exception as e:
        logger.error(f"‚ùå ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò: {e}")
        installer.cleanup()
        return False

if __name__ == "__main__":
    main()