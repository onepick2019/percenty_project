#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CRX ÌååÏùºÏùÑ ÏßÅÏ†ë ÏÑ§ÏπòÌïòÏó¨ ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû®Ïùò Ïò¨Î∞îÎ•∏ IDÎ•º ÌôïÏù∏ÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏

Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Í∏∞Ï°¥Ïóê Îã§Ïö¥Î°úÎìúÎêú CRX ÌååÏùºÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû®ÏùÑ ÏÑ§ÏπòÌïòÍ≥†
ÏõπÏä§ÌÜ†Ïñ¥ Î≤ÑÏ†ÑÍ≥º ÎèôÏùºÌïú IDÏôÄ Ï∂úÏ≤òÎ•º Í∞ÄÏßÄÎèÑÎ°ù Ìï©ÎãàÎã§.
"""

import os
import sys
import time
import json
import logging
import shutil
import zipfile
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class CRXExtensionInstaller:
    def __init__(self):
        self.driver = None
        self.crx_file_path = "jlcdjppbpplpdgfeknhioedbhfceaben.crx"
        self.user_data_dir = os.path.join(os.getcwd(), "chrome_user_data_crx")
        self.extensions_dir = os.path.join(self.user_data_dir, "Default", "Extensions")
        
    def check_crx_file(self):
        """CRX ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏"""
        if not os.path.exists(self.crx_file_path):
            logger.error(f"‚ùå CRX ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {self.crx_file_path}")
            return False
        
        logger.info(f"‚úÖ CRX ÌååÏùº Î∞úÍ≤¨: {self.crx_file_path}")
        file_size = os.path.getsize(self.crx_file_path)
        logger.info(f"üìÅ ÌååÏùº ÌÅ¨Í∏∞: {file_size:,} bytes")
        return True
    
    def extract_crx_to_extensions_dir(self):
        """CRX ÌååÏùºÏùÑ Chrome ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÎîîÎ†âÌÜ†Î¶¨Ïóê Ï∂îÏ∂ú"""
        try:
            # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
            os.makedirs(self.extensions_dir, exist_ok=True)
            
            # CRX ÌååÏùºÏùò Ïã§Ï†ú ID Ï∂îÏ∂ú (ÌååÏùºÎ™ÖÏóêÏÑú)
            extension_id = os.path.splitext(os.path.basename(self.crx_file_path))[0]
            logger.info(f"üÜî ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ID: {extension_id}")
            
            # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÎîîÎ†âÌÜ†Î¶¨
            extension_install_dir = os.path.join(self.extensions_dir, extension_id)
            
            # Í∏∞Ï°¥ ÏÑ§Ïπò Ï†úÍ±∞
            if os.path.exists(extension_install_dir):
                shutil.rmtree(extension_install_dir)
                logger.info("üóëÔ∏è Í∏∞Ï°¥ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†úÍ±∞")
            
            # Î≤ÑÏ†Ñ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± (ÏûÑÏãúÎ°ú 1.0.0 ÏÇ¨Ïö©)
            version_dir = os.path.join(extension_install_dir, "1.0.0")
            os.makedirs(version_dir, exist_ok=True)
            
            # CRX ÌååÏùºÏùÑ ZIPÏúºÎ°ú Ï≤òÎ¶¨ÌïòÏó¨ ÏïïÏ∂ï Ìï¥Ï†ú
            # CRX ÌååÏùºÏùÄ Ìó§ÎçîÎ•º Ï†úÍ±∞ÌïòÍ≥† ZIP ÌòïÌÉúÎ°ú ÏïïÏ∂ï Ìï¥Ï†úÌï¥Ïïº Ìï®
            with open(self.crx_file_path, 'rb') as crx_file:
                # CRX Ìó§Îçî Í±¥ÎÑàÎõ∞Í∏∞
                crx_data = crx_file.read()
                
                # CRX v3 Ìó§Îçî ÌôïÏù∏ Î∞è Í±¥ÎÑàÎõ∞Í∏∞
                if crx_data[:4] == b'Cr24':
                    # CRX v3 ÌòïÏãù
                    version = int.from_bytes(crx_data[4:8], 'little')
                    if version == 3:
                        header_size = int.from_bytes(crx_data[8:12], 'little')
                        zip_start = 12 + header_size
                        zip_data = crx_data[zip_start:]
                    else:
                        logger.error(f"‚ùå ÏßÄÏõêÌïòÏßÄ ÏïäÎäî CRX Î≤ÑÏ†Ñ: {version}")
                        return False
                else:
                    # ÏùºÎ∞ò ZIP ÌååÏùºÎ°ú ÏãúÎèÑ
                    zip_data = crx_data
                
                # ZIP Îç∞Ïù¥ÌÑ∞Î•º ÏûÑÏãú ÌååÏùºÎ°ú Ï†ÄÏû•ÌïòÍ≥† ÏïïÏ∂ï Ìï¥Ï†ú
                temp_zip_path = "temp_extension.zip"
                with open(temp_zip_path, 'wb') as temp_zip:
                    temp_zip.write(zip_data)
                
                # ZIP ÌååÏùº ÏïïÏ∂ï Ìï¥Ï†ú
                with zipfile.ZipFile(temp_zip_path, 'r') as zip_ref:
                    zip_ref.extractall(version_dir)
                
                # ÏûÑÏãú ÌååÏùº Ï†úÍ±∞
                os.remove(temp_zip_path)
                
                logger.info(f"‚úÖ CRX ÌååÏùº ÏïïÏ∂ï Ìï¥Ï†ú ÏôÑÎ£å: {version_dir}")
                
                # manifest.json ÌôïÏù∏
                manifest_path = os.path.join(version_dir, "manifest.json")
                if os.path.exists(manifest_path):
                    with open(manifest_path, 'r', encoding='utf-8') as f:
                        manifest = json.load(f)
                        logger.info(f"üìã ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ïù¥Î¶Ñ: {manifest.get('name', 'Unknown')}")
                        logger.info(f"üìã ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Î≤ÑÏ†Ñ: {manifest.get('version', 'Unknown')}")
                
                return extension_id
                
        except Exception as e:
            logger.error(f"‚ùå CRX ÌååÏùº ÏïïÏ∂ï Ìï¥Ï†ú Ïã§Ìå®: {e}")
            return None
    
    def setup_chrome_options(self):
        """Chrome ÏòµÏÖò ÏÑ§Ï†ï"""
        options = Options()
        
        # ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÎîîÎ†âÌÜ†Î¶¨ ÏÑ§Ï†ï
        options.add_argument(f"--user-data-dir={self.user_data_dir}")
        
        # Í∏∞Î≥∏ Chrome ÏòµÏÖò
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Í¥ÄÎ†® ÏÑ§Ï†ï
        options.add_argument("--disable-extensions-file-access-check")
        options.add_argument("--disable-extensions-http-throttling")
        options.add_argument("--allow-running-insecure-content")
        
        return options
    
    def start_browser(self):
        """Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë"""
        try:
            logger.info("üöÄ Chrome Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë...")
            options = self.setup_chrome_options()
            self.driver = webdriver.Chrome(options=options)
            
            # ÏûêÎèôÌôî Í∞êÏßÄ Î∞©ÏßÄ
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            logger.info("‚úÖ Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë ÏÑ±Í≥µ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë Ïã§Ìå®: {e}")
            return False
    
    def verify_extension_installation(self, expected_id):
        """ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÌôïÏù∏"""
        try:
            logger.info("üîç ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÌôïÏù∏...")
            
            # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            self.driver.get("chrome://extensions/")
            time.sleep(3)
            
            # Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî
            try:
                dev_mode_js = """
                const toggleButton = document.querySelector('extensions-manager')
                    ?.shadowRoot?.querySelector('extensions-toolbar')
                    ?.shadowRoot?.querySelector('#devMode');
                if (toggleButton && !toggleButton.checked) {
                    toggleButton.click();
                    return 'activated';
                }
                return toggleButton?.checked ? 'already_active' : 'not_found';
                """
                
                result = self.driver.execute_script(dev_mode_js)
                logger.info(f"üõ†Ô∏è Í∞úÎ∞úÏûê Î™®Îìú: {result}")
                time.sleep(2)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Í∞úÎ∞úÏûê Î™®Îìú ÌôúÏÑ±Ìôî Ïã§Ìå®: {e}")
            
            # ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥ Ï∂îÏ∂ú
            extraction_js = """
            const manager = document.querySelector('extensions-manager');
            if (!manager || !manager.shadowRoot) {
                return {error: 'extensions-manager not found'};
            }
            
            const itemList = manager.shadowRoot.querySelector('extensions-item-list');
            if (!itemList || !itemList.shadowRoot) {
                return {error: 'extensions-item-list not found'};
            }
            
            const extensions = itemList.shadowRoot.querySelectorAll('extensions-item');
            const results = [];
            
            extensions.forEach(ext => {
                if (!ext.shadowRoot) return;
                
                const nameElement = ext.shadowRoot.querySelector('#name');
                const idElement = ext.shadowRoot.querySelector('#extension-id');
                const enableToggle = ext.shadowRoot.querySelector('#enableToggle');
                const detailsButton = ext.shadowRoot.querySelector('#detailsButton');
                
                const name = nameElement?.textContent?.trim() || '';
                const id = idElement?.textContent?.trim() || ext.id || '';
                const enabled = enableToggle?.checked || false;
                
                // Ï∂úÏ≤ò Ï†ïÎ≥¥ ÌôïÏù∏ (Îã§ÏñëÌïú ÏÑ†ÌÉùÏûê ÏãúÎèÑ)
                let source = '';
                const sourceSelectors = ['.source', '.location', '.install-location'];
                for (const selector of sourceSelectors) {
                    const sourceElement = ext.shadowRoot.querySelector(selector);
                    if (sourceElement) {
                        source = sourceElement.textContent?.trim() || '';
                        break;
                    }
                }
                
                results.push({
                    name: name,
                    id: id,
                    enabled: enabled,
                    source: source
                });
            });
            
            return {
                total_extensions: results.length,
                extensions: results,
                percenty_extension: results.find(ext => 
                    ext.name.includes('ÌçºÏÑºÌã∞') || 
                    ext.id === arguments[0] ||
                    ext.id.includes('jlcdjppbpplpdgfeknhioedbhfceaben')
                ) || null
            };
            """
            
            result = self.driver.execute_script(extraction_js, expected_id)
            
            if result.get('error'):
                logger.error(f"‚ùå ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥ Ï∂îÏ∂ú Ïã§Ìå®: {result['error']}")
                return False
            
            logger.info(f"üìä Ï¥ù ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ïàò: {result['total_extensions']}")
            
            # Î™®Îì† ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Ï†ïÎ≥¥ Ï∂úÎ†•
            for ext in result['extensions']:
                logger.info(f"   - {ext['name']} (ID: {ext['id']}, ÌôúÏÑ±Ìôî: {ext['enabled']}, Ï∂úÏ≤ò: {ext['source']})")
            
            percenty_ext = result.get('percenty_extension')
            if percenty_ext:
                logger.info("‚úÖ ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® Î∞úÍ≤¨:")
                logger.info(f"   - Ïù¥Î¶Ñ: {percenty_ext['name']}")
                logger.info(f"   - ID: {percenty_ext['id']}")
                logger.info(f"   - ÌôúÏÑ±Ìôî: {percenty_ext['enabled']}")
                logger.info(f"   - Ï∂úÏ≤ò: {percenty_ext['source']}")
                
                # Í≤∞Í≥º Ï†ÄÏû•
                result_data = {
                    'extraction_method': 'crx_installation',
                    'timestamp': datetime.now().isoformat(),
                    'expected_id': expected_id,
                    'percenty_extension': percenty_ext,
                    'all_extensions': result['extensions'],
                    'success': True
                }
                
                with open('crx_extension_result.json', 'w', encoding='utf-8') as f:
                    json.dump(result_data, f, ensure_ascii=False, indent=2)
                
                logger.info("üíæ Í≤∞Í≥ºÍ∞Ä crx_extension_result.json ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
                return True
            else:
                logger.error("‚ùå ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû®ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                
                # ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ï†ÄÏû•
                debug_data = {
                    'extraction_method': 'crx_installation_debug',
                    'timestamp': datetime.now().isoformat(),
                    'expected_id': expected_id,
                    'all_extensions': result['extensions'],
                    'success': False
                }
                
                with open('crx_extension_debug.json', 'w', encoding='utf-8') as f:
                    json.dump(debug_data, f, ensure_ascii=False, indent=2)
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÌôïÏù∏ Ïã§Ìå®: {e}")
            return False
    
    def cleanup(self):
        """Ï†ïÎ¶¨ ÏûëÏóÖ"""
        if self.driver:
            logger.info("üîö Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å...")
            try:
                self.driver.quit()
            except:
                pass
            time.sleep(2)
    
    def run(self):
        """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
        logger.info("=" * 60)
        logger.info("üì¶ CRX ÌååÏùºÎ°ú ÌçºÏÑºÌã∞ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÏãúÏûë")
        logger.info("=" * 60)
        
        try:
            # CRX ÌååÏùº ÌôïÏù∏
            if not self.check_crx_file():
                return False
            
            # CRX ÌååÏùºÏùÑ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÎîîÎ†âÌÜ†Î¶¨Ïóê Ï∂îÏ∂ú
            extension_id = self.extract_crx_to_extensions_dir()
            if not extension_id:
                return False
            
            # Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë
            if not self.start_browser():
                return False
            
            # ÏÑ§Ïπò ÌôïÏù∏
            success = self.verify_extension_installation(extension_id)
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
            return False
        
        finally:
            self.cleanup()

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    installer = CRXExtensionInstaller()
    
    try:
        success = installer.run()
        
        logger.info("=" * 60)
        if success:
            logger.info("‚úÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å: CRX ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò ÏÑ±Í≥µ")
        else:
            logger.info("‚ùå ÌÖåÏä§Ìä∏ ÏôÑÎ£å: CRX ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ïπò Ïã§Ìå®")
        logger.info("=" * 60)
        
        return success
        
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï§ëÎã®Îê®")
        installer.cleanup()
        return False
    except Exception as e:
        logger.error(f"‚ùå ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò: {e}")
        installer.cleanup()
        return False

if __name__ == "__main__":
    main()